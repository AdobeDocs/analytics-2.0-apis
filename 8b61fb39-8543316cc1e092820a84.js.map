{"version":3,"file":"8b61fb39-8543316cc1e092820a84.js","mappings":"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","sources":["webpack://analytics-2.0-apis/./node_modules/@adobe/gatsby-theme-aio/src/components/TextBlock/index.js"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport React, { cloneElement, useEffect, useState } from \"react\";\nimport { css } from \"@emotion/react\";\nimport { HeroButtons } from \"../Hero\";\nimport { Media } from \"../Media\";\nimport PropTypes from \"prop-types\";\nimport {\n  layoutColumns,\n  DESKTOP_SCREEN_WIDTH,\n  TABLET_SCREEN_WIDTH\n} from \"../../utils\";\nimport classNames from \"classnames\";\nimport \"@spectrum-css/typography\";\n\nconst counter = {\n  2: 0,\n  3: 0,\n  4: 0,\n};\n\nconst MIN_TABLET_SCREEN_WIDTH = '1023px'\nconst alignMapping = [\"margin-left: 0;\", \"margin-right: 0;\"];\n\nconst mediaCSS = css`\n  & {\n    display: inline;\n    width: ${layoutColumns(6)};\n    box-sizing: border-box;\n    padding: var(--spectrum-global-dimension-size-200);\n\n    @media screen and (max-width: ${TABLET_SCREEN_WIDTH}) {\n      display: block;\n      width: 100%;\n    }\n  }\n`;\n\nconst Icons = ({ icons, isCentered }) =>\n  icons\n    ? cloneElement(icons, {\n        css: css`\n          list-style: none;\n          padding: 0;\n          margin-bottom: var(--spectrum-global-dimension-size-400) !important;\n          display: flex;\n          justify-content: ${isCentered ? \"center\" : \"flex-start\"};\n\n          & li {\n            display: flex;\n            border-right: 1px solid var(--spectrum-global-color-gray-300);\n            height: var(--spectrum-global-dimension-size-600);\n            margin-right: var(--spectrum-global-dimension-size-150);\n          }\n\n          & li:last-of-type {\n            padding-right: 0;\n            border-right: none;\n          }\n\n          .gatsby-resp-image-wrapper {\n            position: relative;\n            width: var(--spectrum-global-dimension-size-800) !important;\n          }\n\n          .gatsby-resp-image-image {\n            position: absolute;\n            top: 0;\n            left: 0;\n            height: 100%;\n            object-fit: contain;\n          }\n        `,\n      })\n    : null;\n\nconst Texts = ({ texts }) => {\n  const textKeys = Object.keys(texts).filter((key) => key.startsWith(\"text\"));\n  return textKeys.map((textKey) => texts[textKey]);\n};\n\nconst Links = ({ links, isCentered, isLinksGroups=false }) =>\n  links\n    ? cloneElement(links, {\n        css: css`\n          list-style: none;\n          padding: 0;\n          display: flex;\n          justify-content: ${isCentered ? \"center\" : \"flex-start\"};\n          ${!isLinksGroups? \"\" : \"flex-wrap: wrap;\"}\n          margin-top: ${isCentered || isLinksGroups\n            ? \"var(--spectrum-global-dimension-size-200) !important;\"\n            : \"var(--spectrum-global-dimension-size-600) !important;\"};\n          & li {\n            display: flex;\n            align-items: center;\n            ${isLinksGroups \n              ? `border-radius: 10px; \n                border:solid 1.8px;\n                margin-right: var(--spectrum-global-dimension-size-200);\n                height: var(--spectrum-global-dimension-size-300);\n                margin-top: var(--spectrum-global-dimension-size-100);\n                background-color: #F7F7F7;\n                `\n              : \"height: var(--spectrum-global-dimension-size-400)\"};\n          }\n\n          & li a {\n            white-space: nowrap;           \n            ${isLinksGroups \n              ? `margin: var(--spectrum-global-dimension-size-100); \n              color: currentColor;\n              text-decoration: none;\n              font-size: var(--spectrum-global-dimension-size-175);` \n              : \"margin-right: var(--spectrum-global-dimension-size-600);\"};\n          }\n\n          & li:last-of-type a {\n            margin-right: ${isLinksGroups ? \"var(--spectrum-global-dimension-size-100)\": \"0\"}\n          }\n\n          & li:hover{\n            ${isLinksGroups  ?\n            `background-color: var(--spectrum-button-primary-m-background-color-hover, var(--spectrum-global-color-gray-800));\n            border-color: var(--spectrum-button-primary-m-border-color-hover, var(--spectrum-global-color-gray-800));            color: var(--spectrum-button-primary-m-text-color-hover, var(--spectrum-global-color-gray-50));`\n            : \"\"}\n          }        \n          & li:hover a{\n            ${isLinksGroups  ? `\n            color: var(--spectrum-button-primary-m-text-color-hover, var(--spectrum-global-color-gray-50));\n            text-decoration: none;`\n            : \"\"}\n          }\n\n          .gatsby-resp-image-wrapper {\n            max-width: none !important;\n            width: 100% !important;\n            height: 100% !important;\n          }\n\n          .gatsby-resp-image-wrapper {\n            width: var(--spectrum-global-dimension-size-400) !important;\n            margin-left: 0 !important;\n            margin-right: var(--spectrum-global-dimension-size-150) !important;\n          }\n\n          .gatsby-resp-image-image {\n            object-fit: contain;\n          }\n          \n          @media screen and (max-width: ${TABLET_SCREEN_WIDTH}) {\n            flex-direction: ${isLinksGroups ? \"initial\" : \"column\"};\n            align-items: ${isCentered ? \"center\" : \"left\"};          \n\n            li {\n              margin-top: var(--spectrum-global-dimension-size-100);              \n            }\n\n            li a {\n              ${isLinksGroups  \n                ? \"font-size: var(--spectrum-global-dimension-size-130);` \" \n                : `margin-right: 0;`\n              }\n            }\n          }\n\n          @media screen and (max-width: 767px) {\n            ${isLinksGroups  ? `width: min-content` : \"\" }\n          }\n        `,\n      })\n    : null;\n\nconst TextBlock = ({\n  className,\n  heading,\n  subHeading,\n  links,\n  buttons,\n  linksGroups,\n  icons,\n  image,\n  assetImg,\n  video,\n  theme = \"lightest\",\n  width = \"100%\",\n  isCentered = false,\n  primaryOutline = false,\n  headerElementType = \"h3\",\n  imageOnly = false,\n  imgWidth = \"50%\",\n  isPrimaryBtn=false,\n  variantsTypePrimary='accent',\n  variantsTypeSecondary='secondary',\n  variantStyleFill = \"fill\",\n  variantStyleOutline = \"outline\",\n  hasCodeBlock = false,\n  homeZigZag = false,\n  isbuttonGroups = false,\n  ...props\n}) => {\n  const Element = headerElementType;\n\n  let initColumns = 100 / parseFloat(width);\n\n  if (width === \"33%\") {\n    width = `${(100 / 3).toFixed(2)}%`;\n    initColumns = 3;\n  }\n\n  const [columns] = useState(initColumns);\n\n  useEffect(() => {\n    return () => {\n      if (typeof counter[columns] !== \"undefined\") {\n        counter[columns]--;\n      }\n    };\n  }, [columns]);\n\n  if (width !== \"100%\") {\n    isCentered = true;\n  }\n\n  if (isCentered) {\n    let blockWidth = \"\";\n    let extraMargin = \"\";\n\n    if (typeof counter[columns] !== \"undefined\") {\n      counter[columns]++;\n    }\n\n    if (columns === 1) {\n      blockWidth = `max-width: ${layoutColumns(6)};`;\n    } else if (columns > 3) {\n      blockWidth = \"max-width: var(--spectrum-global-dimension-size-3600);\";\n    } else {\n      blockWidth = \"max-width: var(--spectrum-global-dimension-size-4600);\";\n      extraMargin = alignMapping[counter[columns] % columns];\n    }\n    return (\n      <>\n        <section\n          className={classNames(className, `spectrum--${theme}`)}\n          css={css`\n            display: table-cell;\n            width: ${width.replace(\"%\", \"vw\")};\n            background: var(--spectrum-global-color-gray-100);\n            padding: var(--spectrum-global-dimension-size-1000) 0;\n\n            @media screen and (max-width: ${TABLET_SCREEN_WIDTH}) {\n              display: block;\n              width: 100%;\n            }\n          `}\n        >\n          <div\n            css={css`\n              ${blockWidth}\n              padding: 0 var(--spectrum-global-dimension-size-400);\n              margin: auto;\n              ${extraMargin}\n\n              @media screen and (max-width: ${TABLET_SCREEN_WIDTH}) {\n                max-width: none;\n                margin: auto;\n              }\n            `}\n          >\n            <Icons icons={icons} isCentered={isCentered} />\n\n            {image &&\n              cloneElement(image, {\n                css: css`\n                  height: var(--spectrum-global-dimension-size-1000);\n                  margin-top: 0;\n                  margin-bottom: var(--spectrum-global-dimension-size-300);\n\n                  .gatsby-resp-image-wrapper {\n                    position: relative;\n                    max-width: none !important;\n                    width: 100% !important;\n                    height: 100% !important;\n                  }\n\n                  .gatsby-resp-image-image {\n                    position: absolute;\n                    top: 0;\n                    left: 0;\n                    height: 100%;\n                    object-fit: contain;\n                  }\n                `,\n              })}\n            {assetImg &&\n                <div className={assetImg?.props?.children}/>}\n\n            {heading && (\n              <Element\n                className=\"spectrum-Heading spectrum-Heading--sizeM\"\n                css={css`\n                  margin-bottom: var(\n                    --spectrum-global-dimension-size-200\n                  ) !important;\n\n                  & ~ p {\n                    margin-top: 0;\n                    margin-bottom: 0 !important;\n                  }\n                `}\n              >\n                {heading.props.children}\n              </Element>\n            )}\n            {subHeading && (\n              <h3\n              className=\"spectrum-Heading spectrum-Heading--sizeM\"\n                css={css`\n                  font-size: var(\n                    --spectrum-global-dimension-size-225\n                  ) !important;\n                  margin-bottom: var(\n                    --spectrum-global-dimension-size-200\n                  ) !important;\n\n                  & ~ p {\n                    margin-top: 0;\n                    margin-bottom: 0 !important;\n                  }\n                `}\n              >\n                {subHeading.props.children}\n              </h3>\n            )}\n\n            <Texts texts={props} />\n\n            <HeroButtons\n              buttons={buttons}\n              styles={[variantStyleFill, variantStyleOutline]}\n              variants={[variantsTypePrimary,variantsTypeSecondary]}\n              css={css`\n                margin-top: var(--spectrum-global-dimension-size-150);\n                margin-bottom: var(--spectrum-global-dimension-size-150);\n                justify-content: center;\n              `}\n            />\n\n            <Links links={links} isCentered={isCentered} />\n\n            <Media css={mediaCSS} video={video} />\n          </div>\n        </section>\n        {width === \"100%\" ||\n        (typeof counter[columns] !== \"undefined\" &&\n          counter[columns] % columns === 0) ? (\n          <div aria-hidden=\"true\" />\n        ) : null}\n      </>\n    );\n  } else {\n    const isReversed =\n      props.slots.endsWith(\"image\") || props.slots.endsWith(\"video\");\n    return (\n      <section\n        className={classNames(className, `spectrum--${theme}`)}\n        css={css`\n          width: 100%;\n          background: var(--spectrum-global-color-gray-100);\n        `}\n      >\n        <div\n          css={css`\n            width: ${DESKTOP_SCREEN_WIDTH};\n            box-sizing: border-box;\n            margin: auto;\n            padding: var(--spectrum-global-dimension-size-1000) 0;\n\n            @media screen and (max-width: ${DESKTOP_SCREEN_WIDTH}) {\n              width: 100%;\n\n              // & > div {\n              //   flex-direction: column !important;\n              // }\n            }\n          `}\n        >\n          <div\n            css={css`\n              display: flex;\n              align-items: center;\n              flex-direction: ${imageOnly\n                ? \"column\"\n                : isReversed\n                ? \"row-reverse\"\n                : \"row\"};\n\n              @media screen and (max-width: ${MIN_TABLET_SCREEN_WIDTH}) {\n                flex-direction: column;\n              }\n            `}\n          >\n            {image &&\n              cloneElement(image, {\n                css: css`\n                  display: flex;\n                  align-items: center;\n                  justify-content: center;\n                  width: ${imgWidth};\n                  // we need to modify the height\n                  // height: calc(\n                  //   var(--spectrum-global-dimension-size-4600) -\n                  //     var(--spectrum-global-dimension-size-225)\n                  // );\n                  box-sizing: border-box;\n                  padding: var(--spectrum-global-dimension-size-200);\n                  margin-top: 0;\n\n                  .gatsby-resp-image-wrapper {\n                    max-width: none !important;\n                    width: 100% !important;\n                    height: 100% !important;\n                  }\n\n                  .gatsby-resp-image-image {\n                    object-fit: contain;\n                  }\n\n                  @media screen and (max-width: ${TABLET_SCREEN_WIDTH}) {\n                    height: auto;\n                    width: 100%;\n                  }\n                `,\n              })}\n             {assetImg &&\n                <div className={assetImg?.props?.children}/>}\n\n            <Media css={mediaCSS} video={video} />\n            {!imageOnly && <div\n              css={css`\n                ${hasCodeBlock ?`width: 70%;` : `width: 50%;`}\n                display: flex;\n                flex-direction: column;\n                justify-content: center;\n                text-align: left;\n                box-sizing: border-box;\n                padding: 0 var(--spectrum-global-dimension-size-400);\n\n                @media screen and (max-width: ${TABLET_SCREEN_WIDTH}) {\n                  width: 100%;\n                  margin: var(--spectrum-global-dimension-size-400) 0;\n                }\n              `}\n            >\n              <Icons icons={icons} isCentered={isCentered} />\n\n              {heading && (\n                <Element\n                  className=\"spectrum-Heading spectrum-Heading--sizeM\"\n                  css={css`\n                    margin-top: 0 !important;\n                    margin-bottom: var(\n                      --spectrum-global-dimension-size-200\n                    ) !important;\n\n                    & + p {\n                      margin-top: 0 !important;\n                    }\n                  `}\n                >\n                  {heading.props.children}\n                </Element>\n              )}\n              {subHeading && !linksGroups && (\n              <h3\n              className=\"spectrum-Heading spectrum-Heading--sizeM\"\n                css={css`\n                font-size: var(\n                  --spectrum-global-dimension-size-225\n                ) !important;\n                  margin-bottom: var(\n                    --spectrum-global-dimension-size-200\n                  ) !important;\n\n                  & ~ p {\n                    margin-top: 0;\n                    margin-bottom: 0 !important;\n                  }\n                `}\n              >\n                {subHeading.props.children}\n              </h3>\n            )}\n\n              <Texts texts={props} />\n\n              {subHeading && linksGroups && (\n              <h3\n              className=\"spectrum-Heading spectrum-Heading--sizeM\"\n                css={css`\n                  font-size: var(\n                    --spectrum-global-dimension-size-225\n                  ) !important;                  \n                  margin-top: var(\n                    --spectrum-global-dimension-size-200\n                  ) !important;\n\n                  & ~ p {\n                    margin-top: 0;\n                    margin-bottom: 0 !important;\n                  }\n                `}\n              >\n                {subHeading.props.children}\n              </h3>\n            )}\n\n              {linksGroups && (\n                <Links links={linksGroups} isCentered={isCentered} isLinksGroups />\n              )}\n\n              <HeroButtons\n                buttons={buttons}\n                styles={[variantStyleFill, variantStyleOutline]}\n                variants={[variantsTypePrimary,variantsTypeSecondary]}\n                heading={homeZigZag ? heading?.props?.children : ''}\n                css={css`\n                  margin-top: var(--spectrum-global-dimension-size-200);\n                `}\n              />\n\n              <Links links={links} isCentered={isCentered} />\n            </div> }\n          </div>\n        </div>\n      </section>\n    );\n  }\n};\n\nTextBlock.propTypes = {\n  heading: PropTypes.element,\n  links: PropTypes.element,\n  icons: PropTypes.element,\n  buttons: PropTypes.element,\n  linksGroups: PropTypes.element,\n  image: PropTypes.element,\n  video: PropTypes.element,\n  theme: PropTypes.string,\n  width: PropTypes.oneOf([\"100%\", \"50%\", \"33%\", \"25%\"]),\n  isCentered: PropTypes.bool,\n  headerElementType: PropTypes.oneOf([\"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\"]),\n  imageOnly: PropTypes.bool,\n  primaryOutline: PropTypes.bool,\n  hasCodeBlock: PropTypes.bool,\n  imgWidth: PropTypes.string,\n  homeZigZag: PropTypes.bool,\n  isbuttonGroups: PropTypes.bool,\n};\n\nexport { TextBlock };\n"],"names":["counter","alignMapping","mediaCSS","css","layoutColumns","TABLET_SCREEN_WIDTH","Icons","icons","isCentered","cloneElement","Texts","texts","Object","keys","filter","key","startsWith","map","textKey","Links","links","isLinksGroups","TextBlock","className","heading","subHeading","buttons","linksGroups","image","assetImg","video","theme","width","primaryOutline","headerElementType","imageOnly","imgWidth","isPrimaryBtn","variantsTypePrimary","variantsTypeSecondary","variantStyleFill","variantStyleOutline","hasCodeBlock","homeZigZag","props","isbuttonGroups","Element","initColumns","parseFloat","toFixed","columns","useState","useEffect","blockWidth","extraMargin","classNames","replace","children","styles","variants","isReversed","slots","endsWith","DESKTOP_SCREEN_WIDTH"],"sourceRoot":""}