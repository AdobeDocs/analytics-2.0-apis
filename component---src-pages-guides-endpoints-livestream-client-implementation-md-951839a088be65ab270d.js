"use strict";(self.webpackChunkanalytics_2_0_apis=self.webpackChunkanalytics_2_0_apis||[]).push([[6282],{97797:function(e,n,t){t.r(n),t.d(n,{_frontmatter:function(){return s},default:function(){return d}});var a=t(87462),o=t(63366),r=(t(15007),t(64983)),i=t(91515),c=["components"],s={},m={_frontmatter:s},p=i.Z;function d(e){var n=e.components,t=(0,o.Z)(e,c);return(0,r.mdx)(p,(0,a.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,r.mdx)("h1",{id:"implement-a-client-for-livestream-data"},"Implement a client for Livestream data"),(0,r.mdx)("p",null,"Use the following information to create a client that can consume Analytics Livestream data:"),(0,r.mdx)("ol",null,(0,r.mdx)("li",{parentName:"ol"},(0,r.mdx)("p",{parentName:"li"},"Install the required software:"),(0,r.mdx)("ul",{parentName:"li"},(0,r.mdx)("li",{parentName:"ul"},"Java 11"),(0,r.mdx)("li",{parentName:"ul"},"Maven"))),(0,r.mdx)("li",{parentName:"ol"},(0,r.mdx)("p",{parentName:"li"},"Update the sample code below:"),(0,r.mdx)("ul",{parentName:"li"},(0,r.mdx)("li",{parentName:"ul"},"Add your stream ID where specified in the code."),(0,r.mdx)("li",{parentName:"ul"},"Add your generated access token where specified in the code. For information on generating this token, see the ",(0,r.mdx)("a",{parentName:"li",href:"https://developer.adobe.com/developer-console/docs/guides/authentication/UserAuthentication/"},"User Authentication Guide.")))),(0,r.mdx)("li",{parentName:"ol"},(0,r.mdx)("p",{parentName:"li"},"Build a runnable JAR:"),(0,r.mdx)("pre",{parentName:"li"},(0,r.mdx)("code",{parentName:"pre"},"* Use the following: ```$ mvn package``` while running the application\n")),(0,r.mdx)("p",{parentName:"li"},(0,r.mdx)("inlineCode",{parentName:"p"},"$ java target/adobe-livestream-consumer-1.0-SNAPSHOT.jar"),"."),(0,r.mdx)("pre",{parentName:"li"},(0,r.mdx)("code",{parentName:"pre"},"* It is highly recommended to have separate threads, one for reading Livestream and another to perform work on the data.\n\n* The schema can be found at the following URL: https://livestream.adobe.net/api/1/schema.v\n")))),(0,r.mdx)("h2",{id:"xml"},"XML"),(0,r.mdx)("p",null,(0,r.mdx)("inlineCode",{parentName:"p"},"resources/java/livestream/pom.xml")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre"},'<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">\n  <modelVersion>4.0.0</modelVersion>\n\n  <groupId>com.adobe.analytics</groupId>\n  <artifactId>adobe-livestream-consumer</artifactId>\n  <version>1.0-SNAPSHOT</version>\n  <packaging>jar</packaging>\n\n  <name>adobe-livestream-consumer</name>\n  <url>http://maven.apache.org</url>\n\n  <properties>\n    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n    <maven.compiler.source>11</maven.compiler.source>\n    <maven.compiler.target>11</maven.compiler.target>\n  </properties>\n\n  <build>\n    <plugins>\n      <plugin>\n        <groupId>org.apache.maven.plugins</groupId>\n        <artifactId>maven-jar-plugin</artifactId>\n        <version>3.3.0</version>\n        <configuration>\n          <archive>\n            <manifest>\n              <addClasspath>true</addClasspath>\n              <mainClass>com.adobe.analytics.LivestreamConsumer</mainClass>\n            </manifest>\n          </archive>\n        </configuration>\n      </plugin>\n    </plugins>\n  </build>\n\n</project>\n')),(0,r.mdx)("h2",{id:"java"},"JAVA"),(0,r.mdx)("p",null,(0,r.mdx)("inlineCode",{parentName:"p"},"resources/java/livestream/src/main/java/com/adobe/analytics/LivestreamConsumer.java")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre"},'package com.adobe.analytics;\n\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.time.Duration;\nimport java.util.concurrent.ArrayBlockingQueue;\nimport java.util.concurrent.BlockingQueue;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.zip.GZIPInputStream;\n\npublic class LivestreamConsumer implements Runnable\n{\n    private final BlockingQueue<String> dataQueue = new ArrayBlockingQueue<>(1000);\n\n    public static void main( String[] args ) throws IOException, InterruptedException {\n        LivestreamConsumer consumer = new LivestreamConsumer();\n        consumer.readFromLivestream();\n    }\n\n    public void readFromLivestream() throws IOException, InterruptedException {\n\n        String accessToken = "PUT ACCESS TOKEN HERE";\n        String streamId = "PUT STREAM ID HERE";\n\n        String streamUrl = "https://livestream.adobe.net/api/1/stream/" + streamId;\n\n        HttpURLConnection connection = getConnection(streamUrl, accessToken);\n        int responseCode = connection.getResponseCode();\n\n        while(responseCode != HttpURLConnection.HTTP_OK) {\n\n            if(responseCode == HttpURLConnection.HTTP_MOVED_TEMP || responseCode == HttpURLConnection.HTTP_MOVED_PERM)  {\n                // Follow the redirect\n                // Pass Authorization Header along\n                String redirectLocation = connection.getHeaderField("location");\n                System.out.println("Redirecting to: " + redirectLocation);\n                connection.disconnect();\n\n                connection = getConnection(redirectLocation, accessToken);\n                responseCode = connection.getResponseCode();\n\n            } else if (responseCode == HttpURLConnection.HTTP_CONFLICT) {\n                connection.disconnect();\n                throw new RuntimeException("Connection refused due to conflict. Check that the maxConnections query string value is identical across connections.");\n\n            } else {\n                connection.disconnect();\n                throw new RuntimeException("Unexpected response code: " + responseCode);\n            }\n        }\n\n        // Spin up a new thread to handle data processing\n        ExecutorService executorService = Executors.newSingleThreadExecutor();\n        executorService.submit(this);\n\n        // The stream is always compressed using GZIP\n        InputStream inputStream = new GZIPInputStream(connection.getInputStream());\n        BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream));\n\n        String line = reader.readLine();\n        while (line != null) {\n            // In order to ensure we keep up with incoming Livestream data, delegate work to another thread\n            // This could be replaced with writing to a data queue like Apache Kafka\n            dataQueue.put(line);\n            line = reader.readLine();\n        }\n\n        reader.close();\n        connection.disconnect();\n        executorService.shutdownNow();\n    }\n\n    private HttpURLConnection getConnection(final String streamUrl, final String accessToken) throws IOException {\n        URL url = new URL(streamUrl);\n        HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n        connection.setReadTimeout((int) Duration.ofSeconds(60).toMillis());\n        connection.setConnectTimeout((int) Duration.ofSeconds(10).toMillis());\n\n        connection.setRequestProperty("Accept-Encoding", "gzip");\n        connection.setRequestProperty("Authorization", "Bearer " + accessToken);\n\n        // Many client libraries remove the Authorization header on a redirect\n        // This application handles redirects manually to avoid that\n        connection.setInstanceFollowRedirects(false);\n\n        return connection;\n    }\n\n    @Override\n    public void run() {\n        try {\n            while(true) {\n                String data = dataQueue.take();\n                // Do data processing here, in a separate thread\n                System.out.println(data);\n            }\n        } catch (InterruptedException e) {\n            throw new RuntimeException(e);\n        }\n    }\n}\n')))}d.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-guides-endpoints-livestream-client-implementation-md-951839a088be65ab270d.js.map