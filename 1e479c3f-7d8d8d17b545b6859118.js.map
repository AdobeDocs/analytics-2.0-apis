{"version":3,"file":"1e479c3f-7d8d8d17b545b6859118.js","mappings":"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","sources":["webpack://analytics-2.0-apis/./node_modules/@adobe/gatsby-theme-aio/src/components/VideoCarousel/index.js"],"sourcesContent":["/*\n * Copyright 2021 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport React, { useEffect, useState } from \"react\";\nimport { css } from \"@emotion/react\";\nimport \"@spectrum-css/typography\";\nimport PropTypes from \"prop-types\";\nimport {\n    TABLET_SCREEN_WIDTH,\n    layoutColumns,\n    MOBILE_SCREEN_WIDTH,\n} from \"@adobe/gatsby-theme-aio/src/utils\";\nimport { DESKTOP_SCREEN_WIDTH } from \"@adobe/gatsby-theme-aio/src/utils\";\n\nimport {\n    HeroButtons\n} from \"../Hero\"\nimport classNames from \"classnames\";\nimport { Swiper, SwiperSlide, } from \"swiper/react\";\nimport SwiperCore, { Pagination, Autoplay, Navigation } from \"swiper\";\nimport \"swiper/css\";\nimport \"swiper/css/pagination\";\nimport \"swiper/css/navigation\";\n\nSwiperCore.use([Autoplay, Pagination, Navigation]);\n\nconst smallMobileView = \"375px\";\nconst MIN_MOBILE_SCREEN_WIDTH = \"767px\"\n\nconst Texts = ({ texts, index }) => {\n    const definedTextKeys = texts.slots\n        .split(',').map(key => key.trim())\n        .filter((key) => key.startsWith('text'));\n    return definedTextKeys.map((data) => texts[`${data}${index}`]);\n};\n\nconst SwiperContent = ({\n    textKeys,\n    heading,\n    buttons,\n    props,\n    index,\n    theme,\n    isCenter,\n    videos,\n    position\n}) => {\n\n    return (\n        <div\n            className={classNames(`spectrum--${theme}`)}\n            css={css`\n                display: flex;\n                gap:5%;\n                margin-bottom: var(--spectrum-global-dimension-size-500);\n                flex-direction: ${position === \"left\" ? \"row\" : \"row-reverse\"};\n                \n                @media screen and (max-width: ${TABLET_SCREEN_WIDTH}) {\n                flex-direction: column;\n                max-width: calc(${layoutColumns(6)}) !important;\n                gap:25px;\n                }\n\n                @media screen and (max-width: ${MIN_MOBILE_SCREEN_WIDTH}) {\n                max-width: calc(${layoutColumns(3.5)}) !important;\n                gap:25px;\n                }        \n            `}\n        >\n            <div\n                css={css`\n                    flex: 1;\n                    justify-content: center;\n                    width:100%;\n                    padding-right:5%;\n                    @media screen and (max-width: ${DESKTOP_SCREEN_WIDTH}) {\n                    margin: auto;\n                    }\n\n                    @media screen and (max-width: ${MOBILE_SCREEN_WIDTH}) {\n                    margin: 0;\n                    max-width: calc(${layoutColumns(3.5)}) !important;\n                    }\n\n                    @media screen and (max-width: ${TABLET_SCREEN_WIDTH}) {\n                    max-width: calc(${layoutColumns(6)}) !important;\n                    margin: 0;\n                    }\n                    `}\n            >\n                {videos.length &&\n                    <video name=\"media3\" loop=\"true\" muted=\"true\" autoPlay preload=\"metadata\" playsInline css={css`\n                            height:auto;\n                            width:570px;\n                        `}>\n                        <source src={videos[index]} />\n                    </video>}\n            </div>\n\n            {textKeys.length > 0 || heading || buttons ? (\n                <div\n                    css={css`\n                        padding-left:5%;\n                        text-align: left;\n                        flex: 1;\n                        display: ${isCenter ? \"flex\" : \"block\"};\n                        flex-direction:  ${isCenter && \"column \"};\n                        height:  ${isCenter && \"auto\"};\n                        justify-content:  ${isCenter && \"center\"};\n                        padding-bottom: var(--spectrum-global-dimension-size-200);\n                        @media only screen and (min-width: ${smallMobileView}) and(max-width:${MOBILE_SCREEN_WIDTH}) {\n                        margin: 0;\n                        text-align: center !important;\n                        max-width: calc(${layoutColumns(3.5)}) !important;\n                        padding-left:  var(--spectrum-global-dimension-size-100) !important;\n                        }\n                `}\n                >\n                    {heading && (\n                        <h3\n                            className=\"spectrum-Heading--sizeL\"\n                            css={css`\n                                @media only screen and (max-width: ${TABLET_SCREEN_WIDTH}) {\n                                font-size: 27px !important;\n                                }\n                                @media only screen and (max-width: ${MIN_MOBILE_SCREEN_WIDTH}) {\n                                font-size: 22px !important;\n                                }\n                                `\n                            }>\n                            {heading.props.children}\n                        </h3>\n                    )}\n                    {textKeys.length > 0 ?\n                        <div\n                            className=\"textWrapper\"\n                            css={css`\n                                @media only screen and (max-width: ${MOBILE_SCREEN_WIDTH}) {\n                                &>h3{\n                                    font-size: var(--spectrum-alias-heading-xxs-text-size) !important;\n\n                                }\n                                }`\n                            }\n                        >\n                            <Texts texts={props} index={index} />\n                        </div>\n                        : null}\n                    {buttons ? (\n                        <div\n                            css={css`\n                                margin-top: var(--spectrum-global-dimension-size-200);\n\n                                @media only screen and (max-width: ${MOBILE_SCREEN_WIDTH}) {\n                                    div:first-child{\n                                    justify-content:center !important;\n                                    }\n                                }\n                            `}\n                        >\n                            <HeroButtons buttons={buttons} />\n                        </div>\n                    ) : null}\n                </div>\n            ) : null}\n        </div>\n    );\n};\n\nconst VideoCarousel = ({\n    className,\n    theme = \"dark\",\n    swiperSpeed = 600,\n    delay = 2500,\n    enableNavigation = false,\n    variant = \"fullWidth\",\n    bulletActiveClass = \"swiper-pagination-bullet-active\",\n    bulletClass = \"swiper-pagination-bullet\",\n    navigationPre = \"swiper-button-prev\",\n    navigationNext = \"swiper-button-next\",\n    isCenter = false,\n    videos = [],\n    position = \"left\",\n    navigationIconColor = \"black\",\n    ...props\n}) => {\n    const [duration, setDuration] = useState([]);\n\n    const propKeys = Object.keys(props);\n    let carouselProps = propKeys.filter((key) => key.startsWith(\"heading\"));\n\n    carouselProps = carouselProps.map((data, index) => {\n        return {\n            heading: props[data],\n            buttons: props[`buttons${index}`],\n        };\n    });\n\n    const getVideoDurations = async (videoUrl) => {\n        const durations = [];\n        for (let i = 0; i < videoUrl?.length; i++) {\n            const url = videoUrl[i];\n            const video = document.createElement('video');\n            video.src = url;\n\n            await new Promise(resolve => {\n                video.onloadedmetadata = () => {\n                    durations[i] = video.duration * 1000;\n                    resolve();\n                };\n            });\n        }\n        return durations;\n    };\n\n    async function videoDurationArr() {\n        let duration1 = await getVideoDurations(videos);\n        setDuration(duration1)\n    }\n\n    useEffect(() => {\n        videoDurationArr()\n    }, [])\n\n    const textKeys = props.slots?.split(\",\")?.filter((key) => key.trim().startsWith(\"text\"));\n\n    if (videos?.length && !duration.length) return <></>\n    if (variant === \"halfWidth\") {\n        return (\n            <section\n                className={classNames(className, `spectrum--${theme}`)}\n                css={css`\n                    position: relative;\n                    z-index: 0;\n                    background: var(--spectrum-global-color-gray-100);\n                    padding: var(--spectrum-global-dimension-size-600) 0 var(--spectrum-global-dimension-size-600) 0;`}\n                role=\"button\"\n                tabindex={0}\n                onKeyDown={(e) => {\n                    if (e.key === \"ArrowRight\") {\n                        const swiperSlide = document.querySelector('.swiper').swiper;\n                        swiperSlide.slideNext();\n                    }\n                    if (e.key === \"ArrowLeft\") {\n                        const swiper = document.querySelector('.swiper').swiper;\n                        swiper.slidePrev();\n                    }\n                }}\n            >\n                <div\n                    css={css`\n                            max-width: calc(${layoutColumns(10)});\n                            margin: auto;\n                            @media screen and (max-width: ${MOBILE_SCREEN_WIDTH}) {\n                                max-width: calc(${layoutColumns(2.75)}) !important;\n                            }\n                            @media screen and (min-width: ${MOBILE_SCREEN_WIDTH})  and (max-width: ${TABLET_SCREEN_WIDTH})  {\n                                padding-bottom: 0;\n                                margin-top: 0;\n                                max-width: calc(${layoutColumns(6)}) !important;\n                            }\n                            `}\n                >\n                    <Swiper\n                        speed={swiperSpeed}\n                        slidesPerView={\"auto\"}\n                        autoplay={{\n                            delay,\n                        }}\n                        pagination={{\n                            bulletActiveClass,\n                            bulletClass,\n                            clickable: true,\n\n                        }}\n                        navigation={{\n                            nextEl: `.${navigationNext}`,\n                            prevEl: `.${navigationPre}`,\n                        }}\n                    >\n                        {carouselProps.map((data, index) => {\n                            return (\n                                <SwiperSlide key={index} {...(videos?.length && duration[index] ? { \"data-swiper-autoplay\": `${duration[index]}` } : {})} >\n                                    <SwiperContent\n                                        textKeys={textKeys}\n                                        heading={data.heading}\n                                        buttons={data.buttons}\n                                        props={props}\n                                        index={index}\n                                        theme={theme}\n                                        videos={videos}\n                                        isCenter={isCenter}\n                                        position={position}\n                                    />\n                                    {enableNavigation ? (\n                                        <>\n                                            <div css={css`color:${navigationIconColor}`} className={navigationPre}></div>\n                                            <div css={css`color:${navigationIconColor}`} className={navigationNext} ></div>\n                                        </>\n                                    ) : null}\n                                </SwiperSlide>\n                            );\n                        })}\n                    </Swiper>\n                </div>\n            </section>\n        );\n    }\n    else if (variant === 'fullWidth') {\n        return (\n            <section\n                className={classNames(className, `spectrum--${theme}`)}\n                css={css`\n                    position: relative;\n                    z-index: 0;\n                    background: var(--spectrum-global-color-gray-100);\n                    padding: var(--spectrum-global-dimension-size-600) 0 var(--spectrum-global-dimension-size-200) 0;\n                `}\n                role=\"button\"\n                tabindex={0}\n                onKeyDown={(e) => {\n                    if (e.key === \"ArrowRight\") {\n                        const swiper = document.querySelector('.swiper').swiper;\n                        swiper.slideNext();\n                    }\n                    if (e.key === \"ArrowLeft\") {\n                        const swiper = document.querySelector('.swiper').swiper;\n                        swiper.slidePrev();\n                    }\n                }}\n            >\n                <Swiper\n                    speed={swiperSpeed}\n                    slidesPerView={\"auto\"}\n                    autoplay={{\n                        delay,\n                    }}\n                    pagination={{\n                        bulletActiveClass,\n                        bulletClass,\n                        clickable: true,\n                    }}\n                    navigation={{\n                        nextEl: `.${navigationNext}`,\n                        prevEl: `.${navigationPre}`,\n                    }}\n                >\n                    {carouselProps.map((data, index) => {\n                        return (\n                            <SwiperSlide key={index} {...(videos?.length && duration[index] ? { \"data-swiper-autoplay\": `${duration[index]}` } : {})}>\n                                <div css={css`\n                                        width:100%;\n                                        @media screen and (max-width: ${MOBILE_SCREEN_WIDTH}) {\n                                            width:100% !important;\n                                        }\n                                `} >\n                                    <div\n                                        css={css`\n                                            max-width: calc(${layoutColumns(12)});\n                                            margin: auto;\n\n                                            @media screen and (min-width: ${MOBILE_SCREEN_WIDTH})  and (max-width: ${TABLET_SCREEN_WIDTH})  {\n                                                max-width: calc(${layoutColumns(6)});\n\n                                            }\n                                    `}>\n                                        <SwiperContent\n                                            textKeys={textKeys}\n                                            heading={data.heading}\n                                            buttons={data.buttons}\n                                            props={props}\n                                            videos={videos}\n                                            index={index}\n                                            theme={theme}\n                                            isCenter={isCenter}\n                                            position={position}\n                                        />\n                                        {enableNavigation ? (\n                                            <div >\n                                                <div css={css`color:${navigationIconColor}`} className={navigationPre}></div>\n                                                <div css={css`color:${navigationIconColor}`} className={navigationNext} ></div>\n                                            </div>\n                                        ) : null}\n                                    </div>\n                                </div>\n                            </SwiperSlide>\n                        );\n                    })}\n                </Swiper>\n            </section>\n        )\n    }\n};\n\nVideoCarousel.propTypes = {\n    className: PropTypes.string,\n    theme: PropTypes.oneOf([\"light\", \"dark\", \"lightest\"]),\n    swiperSpeed: PropTypes.number,\n    delay: PropTypes.number,\n    enableNavigation: PropTypes.bool,\n    slideTheme: PropTypes.oneOf([\"light\", \"dark\"]),\n    bulletActiveClass: PropTypes.string,\n    bulletClass: PropTypes.string,\n    navigationNext: PropTypes.string,\n    navigationPre: PropTypes.string,\n    isCenter: PropTypes.bool,\n    variant: PropTypes.string,\n    videos: PropTypes.array,\n    navigationIconColor: PropTypes.string\n};\n\nexport { VideoCarousel };"],"names":["SwiperCore","Autoplay","Pagination","Navigation","MIN_MOBILE_SCREEN_WIDTH","Texts","texts","index","slots","split","map","key","trim","filter","startsWith","data","SwiperContent","textKeys","heading","buttons","props","theme","isCenter","videos","position","className","classNames","css","TABLET_SCREEN_WIDTH","layoutColumns","DESKTOP_SCREEN_WIDTH","MOBILE_SCREEN_WIDTH","length","name","loop","muted","autoPlay","preload","playsInline","src","children","VideoCarousel","swiperSpeed","delay","enableNavigation","variant","bulletActiveClass","bulletClass","navigationPre","navigationNext","navigationIconColor","useState","duration","setDuration","carouselProps","Object","keys","getVideoDurations","videoUrl","durations","i","url","video","document","createElement","Promise","resolve","onloadedmetadata","duration1","useEffect","videoDurationArr","role","tabindex","onKeyDown","e","querySelector","swiper","slideNext","slidePrev","speed","slidesPerView","autoplay","pagination","clickable","navigation","nextEl","prevEl"],"sourceRoot":""}