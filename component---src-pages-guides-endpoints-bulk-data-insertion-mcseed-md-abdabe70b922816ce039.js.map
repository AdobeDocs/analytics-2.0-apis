{"version":3,"file":"component---src-pages-guides-endpoints-bulk-data-insertion-mcseed-md-abdabe70b922816ce039.js","mappings":"kNAUsBA,E,wEAFTC,EAAe,CAAC,EAOvBC,GALgBF,EAKY,cALJ,SAA6BG,GAEzD,OADAC,QAAQC,KAAK,aAAeL,EAAO,4EAC5B,eAASG,EACjB,GAGKG,EAAc,CAClBL,aAAAA,GAEIM,EAAYC,EAAAA,EACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGP,GACF,YACD,OAAO,SAACI,GAAD,UAAeD,EAAiBH,EAAhC,CAAuCO,WAAYA,EAAYC,QAAQ,eAG5E,eACE,GAAM,wCADR,yCAGA,+LAAgL,cAAGC,WAAW,IAC1L,KAAQ,wGACP,uBAAYA,WAAW,KAAvB,mBAFL,mFAGA,eACE,GAAM,iBADR,kBAGA,kHACA,oBACE,eAAIA,WAAW,MAAf,gFAAoG,cAAGA,WAAW,KAC9G,KAAQ,oBADwF,iDAApG,0IAGA,eAAIA,WAAW,MAAf,aAAiC,uBAAYA,WAAW,MAAvB,kBAAjC,wEAAoK,uBAAYA,WAAW,MAAvB,YAApK,QAAiO,uBAAYA,WAAW,MAAvB,QAAjO,UAA4R,uBAAYA,WAAW,MAAvB,kBAA5R,8DAEF,SAACV,EAAD,CAAaW,QAAQ,OAAOC,MAAM,OAAOH,QAAQ,iBACjD,0jBACA,eACE,GAAM,qBADR,sBAGA,wKACA,oBACE,eAAIC,WAAW,MAAf,uBAA2C,uBAAYA,WAAW,MAAvB,kCAA3C,sJACA,eAAIA,WAAW,OAAK,uBAAYA,WAAW,MAAvB,kCAApB,mCACA,eAAIA,WAAW,OAAK,uBAAYA,WAAW,MAAvB,wCAApB,eAAoH,uBAAYA,WAAW,MAAvB,KAApH,0BAEF,wSACA,eACE,GAAM,gCADR,iCAGA,oBACE,eAAIA,WAAW,MAAf,mIACA,eAAIA,WAAW,MAAf,kMACA,eAAIA,WAAW,MAAf,gEACE,eAAIA,WAAW,OACb,eAAIA,WAAW,MAAf,qBACA,eAAIA,WAAW,MAAf,8BAGJ,eAAIA,WAAW,MAAf,6EACE,eAAIA,WAAW,OACb,eAAIA,WAAW,MAAf,sBACA,eAAIA,WAAW,MAAf,iCACA,eAAIA,WAAW,MAAf,yBACA,eAAIA,WAAW,MAAf,gCACA,eAAIA,WAAW,MAAf,4CAGJ,eAAIA,WAAW,MAAf,gHACE,eAAIA,WAAW,OACb,eAAIA,WAAW,MAAf,+EACA,eAAIA,WAAW,MAAf,+DAMT,CAEDH,EAAWM,gBAAiB,C","sources":["webpack://analytics-2.0-apis/./src/pages/guides/endpoints/bulk-data-insertion/mcseed.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/analytics-2.0-apis/analytics-2.0-apis/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst InlineAlert = makeShortcode(\"InlineAlert\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"use-customer-id-to-identify-visitors\"\n    }}>{`Use customer ID to identify visitors`}</h1>\n    <p>{`Adobe offers a way to simplify the process of generating an identifier used by the Adobe Experience Cloud Identity Service. Adobe can use one of the customer IDs in the `}<a parentName=\"p\" {...{\n        \"href\": \"https://experienceleague.adobe.com/docs/id-service/using/id-service-api/methods/setcustomerids.html\"\n      }}><inlineCode parentName=\"a\">{`setCustomerIDs`}</inlineCode></a>{` method as a seed for generating an Adobe Experience Cloud visitor ID for you.`}</p>\n    <h2 {...{\n      \"id\": \"prerequisites\"\n    }}>{`Prerequisites`}</h2>\n    <p>{`Before using this method to identify visitors, make sure that all of the following are met:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Communicate your intent to use this feature to the team responsible for the `}<a parentName=\"li\" {...{\n          \"href\": \"./file-format.md\"\n        }}>{`Bulk Data Insertion API and associated format`}</a>{`. It requires coordination between this team and the Adobe Audience Manager team to provision the desired integration on the backend.`}</li>\n      <li parentName=\"ul\">{`Only one `}<inlineCode parentName=\"li\">{`customerIDType`}</inlineCode>{` can be used as a seed per global company ID. If you attempt to set `}<inlineCode parentName=\"li\">{`isMCSeed`}</inlineCode>{` to `}<inlineCode parentName=\"li\">{`true`}</inlineCode>{` on a `}<inlineCode parentName=\"li\">{`customerIDType`}</inlineCode>{` other than the one provisioned by Adobe, it is ignored.`}</li>\n    </ul>\n    <InlineAlert variant=\"info\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`Adobe may add optional request and response members (name/value pairs) to existing API objects at any time and without notice or changes in versioning. Adobe recommends that you refer to the API documentation of any third-party tool you integrate with our APIs so that such additions are ignored in processing if not understood. If implemented properly, such additions are non-breaking changes for your implementation. Adobe will not remove parameters or add required parameters without first providing standard notification through release notes.`}</p>\n    <h2 {...{\n      \"id\": \"file-requirements\"\n    }}>{`File requirements`}</h2>\n    <p>{`When uploading files to the BDIA API and the customer ID is the desired visitor identifier for the row, make sure that all the following are met:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`The case-sensitive `}<inlineCode parentName=\"li\">{`customerID.[customerIDType].id`}</inlineCode>{` is specified in the file's column header row. The `}{`[customerIDType]`}{` will be Audience Manager's integration code (DO NOT include brackets). `}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`customerID.[customerIDType].id`}</inlineCode>{` contains a value for each row`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`customerID.[customerIDType].isMCSeed`}</inlineCode>{` is set to `}<inlineCode parentName=\"li\">{`1`}</inlineCode>{` (true) for each row`}</li>\n    </ul>\n    <p>{`If either of these variables are blank, Adobe falls back to other visitor identification columns. If there are no other visitor identifiers present in the row, the row is skipped. Rows that fall back to other visitor identification columns are treated as separate visitors.`}</p>\n    <h2 {...{\n      \"id\": \"example-integration-workflow\"\n    }}>{`Example Integration Workflow`}</h2>\n    <ol>\n      <li parentName=\"ol\">{`Select a field that you wish to use as a seed to generate an MCID. For example, you could choose the customer's email address.`}</li>\n      <li parentName=\"ol\">{`Setup an integration with Audience Manager. The seed field will be your \"integration code\". You will also give them a preferred unique salt value. We recommend using your report suite name.`}</li>\n      <li parentName=\"ol\">{`Audience Manager will give back to you the following fields:`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`Partner ID (pid)`}</li>\n          <li parentName=\"ul\">{`Data Provider ID (dpid)`}</li>\n        </ul>\n      </li>\n      <li parentName=\"ol\">{`Give the following values to your consultant to pass on to the BDIA team:`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`Global Company ID`}</li>\n          <li parentName=\"ul\">{`Integration Code (ex. email)`}</li>\n          <li parentName=\"ul\">{`AAM Partner ID (pid)`}</li>\n          <li parentName=\"ul\">{`AAM Data Provider ID (dpid)`}</li>\n          <li parentName=\"ul\">{`Salt value (ex. mycompanyreportsuite)`}</li>\n        </ul>\n      </li>\n      <li parentName=\"ol\">{`Once you are notified of successful configuration, you would include the following fields in your BDIA file:`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`customerID.email.id.  (value will be a unique email address for each user)`}</li>\n          <li parentName=\"ul\">{`customerID.email.isMCSeed (value will be 1 for all rows)`}</li>\n        </ul>\n      </li>\n    </ol>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["name","_frontmatter","InlineAlert","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","variant","slots","isMDXComponent"],"sourceRoot":""}