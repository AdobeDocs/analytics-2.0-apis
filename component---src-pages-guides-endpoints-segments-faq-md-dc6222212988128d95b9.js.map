{"version":3,"file":"component---src-pages-guides-endpoints-segments-faq-md-dc6222212988128d95b9.js","mappings":"kNAUsBA,E,wEAFTC,EAAe,CAAC,EAOvBC,GALgBF,EAKY,cALJ,SAA6BG,GAEzD,OADAC,QAAQC,KAAK,aAAeL,EAAO,4EAC5B,eAASG,EACjB,GAGKG,EAAc,CAClBL,aAAAA,GAEIM,EAAYC,EAAAA,EACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGP,GACF,YACD,OAAO,SAACI,GAAD,UAAeD,EAAiBH,EAAhC,CAAuCO,WAAYA,EAAYC,QAAQ,eAG5E,eACE,GAAM,oBADR,qBAGA,qFACA,eACE,GAAM,oEADR,sEAGA,oBACE,eAAIC,WAAW,MAAf,wEACA,eAAIA,WAAW,MAAf,oCACA,eAAIA,WAAW,MAAf,sGACA,eAAIA,WAAW,MAAf,gJACA,eAAIA,WAAW,MAAf,2WAEF,eACE,GAAM,8BADR,gCAGA,mBAAG,cAAGA,WAAW,IACb,KAAQ,kHADT,qBAAH,iSAE+T,uBAAYA,WAAW,KAAvB,kBAF/T,sDAGA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,iBADZ,wkBA6BL,SAACV,EAAD,CAAaW,QAAQ,OAAOC,MAAM,OAAOH,QAAQ,iBACjD,0jBACA,eACE,GAAM,iCADR,mCAGA,0iBAGH,CAEDF,EAAWM,gBAAiB,C","sources":["webpack://analytics-2.0-apis/./src/pages/guides/endpoints/segments/faq.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/analytics-2.0-apis/analytics-2.0-apis/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst InlineAlert = makeShortcode(\"InlineAlert\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"segments-api-faq\"\n    }}>{`Segments API FAQ`}</h1>\n    <p>{`Frequently asked questions around using the Segments endpoint.`}</p>\n    <h3 {...{\n      \"id\": \"what-are-some-best-practices-around-submitting-segment-api-calls\"\n    }}>{`What are some best practices around submitting segment API calls?`}</h3>\n    <ul>\n      <li parentName=\"ul\">{`Make multiple, smaller requests instead of a large, single request.`}</li>\n      <li parentName=\"ul\">{`Request data once and cache it.`}</li>\n      <li parentName=\"ul\">{`Use caution when updating a segment so that you do not alter the original segment used by others.`}</li>\n      <li parentName=\"ul\">{`Avoid creating duplicate segments with the same definition. Creating many segments affects performance for your company in some situations.`}</li>\n      <li parentName=\"ul\">{`If possible, use the Analytics UI for creating segments from scratch. The UI offers significant advantages for managing and optimizing the complexity of this task. If you need to create segments programmatically, it is usually easier to create a template segment in the UI and then have your application change only small portions of the segment definition.`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"what-are-segment-templates\"\n    }}>{`What are segment templates?`}</h3>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://experienceleague.adobe.com/docs/analytics/components/segmentation/segmentation-workflow/seg-build.html\"\n      }}>{`Segment templates`}</a>{` are provided by Adobe for common use cases. You can base new segments off of these Adobe-provided segment templates. Although original templates cannot be modified, copies of them can be made and then the copies can be modified. You can identify templates by the additional attribute `}<inlineCode parentName=\"p\">{`template: true`}</inlineCode>{` as shown at the bottom of the following example:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n      \"id\": \"Has_An_Action\",\n      \"name\": \"Has an Action\",\n      \"description\": null,\n      \"definition\": {\n        \"container\": {\n          \"func\": \"container\",\n          \"pred\": {\n            \"val\": {\n              \"func\": \"attr\",\n              \"name\": \"variables/mobileaction\"\n            },\n            \"func\": \"exists\",\n            \"description\": \"Action Name\"\n          },\n          \"context\": \"hits\"\n        },\n        \"func\": \"segment\",\n        \"version\": [\n          1,\n          0,\n          0\n        ]\n      },\n      \"template\": true\n},\n`}</code></pre>\n    <InlineAlert variant=\"info\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`Adobe may add optional request and response members (name/value pairs) to existing API objects at any time and without notice or changes in versioning. Adobe recommends that you refer to the API documentation of any third-party tool you integrate with our APIs so that such additions are ignored in processing if not understood. If implemented properly, such additions are non-breaking changes for your implementation. Adobe will not remove parameters or add required parameters without first providing standard notification through release notes.`}</p>\n    <h3 {...{\n      \"id\": \"what-is-segment-compatibility\"\n    }}>{`What is segment compatibility?`}</h3>\n    <p>{`Some segments can only be used with certain reporting engines. For example, some segments work only with Data Warehouse and some work only with Analysis Workspace. The compatibility expansion includes a return object that specifies the products in which the segment can be used. The version information of the products is also included in the response. The version information is for internal use and can be ignored. Compatibility and version information cannot be edited because they are derived from the definition of the segment.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["name","_frontmatter","InlineAlert","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","variant","slots","isMDXComponent"],"sourceRoot":""}