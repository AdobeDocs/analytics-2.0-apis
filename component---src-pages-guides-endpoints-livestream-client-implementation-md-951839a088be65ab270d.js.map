{"version":3,"file":"component---src-pages-guides-endpoints-livestream-client-implementation-md-951839a088be65ab270d.js","mappings":"0RAQaA,EAAe,CAAC,EACvBC,EAAc,CAClBD,aAAAA,GAEIE,EAAYC,EAAAA,EACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,GACF,YACD,OAAO,SAACJ,GAAD,UAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,eAG5E,eACE,GAAM,0CADR,2CAGA,mHACA,oBACE,eAAIC,WAAW,OACb,cAAGA,WAAW,MAAd,mCACA,eAAIA,WAAW,OACb,eAAIA,WAAW,MAAf,YACA,eAAIA,WAAW,MAAf,YAGJ,eAAIA,WAAW,OACb,cAAGA,WAAW,MAAd,kCACA,eAAIA,WAAW,OACb,eAAIA,WAAW,MAAf,oDACA,eAAIA,WAAW,MAAf,mHAAuI,cAAGA,WAAW,KACjJ,KAAQ,gGAD2H,kCAK3I,eAAIA,WAAW,OACb,cAAGA,WAAW,MAAd,0BACA,gBAAKA,WAAW,OAAK,iBAAMA,WAAW,OAAjB,8EAErB,cAAGA,WAAW,OAAK,uBAAYA,WAAW,KAAvB,4DAAnB,MACA,gBAAKA,WAAW,OAAK,iBAAMA,WAAW,OAAjB,iOAMzB,eACE,GAAM,OADR,QAGA,mBAAG,uBAAYA,WAAW,KAAvB,uCACH,qBAAK,iBAAMA,WAAW,OAAjB,ysCAsCL,eACE,GAAM,QADR,SAGA,mBAAG,uBAAYA,WAAW,KAAvB,yFACH,qBAAK,iBAAMA,WAAW,OAAjB,wvIA6GR,CAEDJ,EAAWK,gBAAiB,C","sources":["webpack://analytics-2.0-apis/./src/pages/guides/endpoints/livestream/client-implementation.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/analytics-2.0-apis/analytics-2.0-apis/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"implement-a-client-for-livestream-data\"\n    }}>{`Implement a client for Livestream data`}</h1>\n    <p>{`Use the following information to create a client that can consume Analytics Livestream data:`}</p>\n    <ol>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Install the required software:`}</p>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`Java 11`}</li>\n          <li parentName=\"ul\">{`Maven`}</li>\n        </ul>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Update the sample code below:`}</p>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`Add your stream ID where specified in the code.`}</li>\n          <li parentName=\"ul\">{`Add your generated access token where specified in the code. For information on generating this token, see the `}<a parentName=\"li\" {...{\n              \"href\": \"https://developer.adobe.com/developer-console/docs/guides/authentication/UserAuthentication/\"\n            }}>{`User Authentication Guide.`}</a></li>\n        </ul>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Build a runnable JAR:`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{}}>{`* Use the following: \\`\\`\\`$ mvn package\\`\\`\\` while running the application\n`}</code></pre>\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`$ java target/adobe-livestream-consumer-1.0-SNAPSHOT.jar`}</inlineCode>{`.`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{}}>{`* It is highly recommended to have separate threads, one for reading Livestream and another to perform work on the data.\n\n* The schema can be found at the following URL: https://livestream.adobe.net/api/1/schema.v\n`}</code></pre>\n      </li>\n    </ol>\n    <h2 {...{\n      \"id\": \"xml\"\n    }}>{`XML`}</h2>\n    <p><inlineCode parentName=\"p\">{`resources/java/livestream/pom.xml`}</inlineCode></p>\n    <pre><code parentName=\"pre\" {...{}}>{`<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n  <modelVersion>4.0.0</modelVersion>\n\n  <groupId>com.adobe.analytics</groupId>\n  <artifactId>adobe-livestream-consumer</artifactId>\n  <version>1.0-SNAPSHOT</version>\n  <packaging>jar</packaging>\n\n  <name>adobe-livestream-consumer</name>\n  <url>http://maven.apache.org</url>\n\n  <properties>\n    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n    <maven.compiler.source>11</maven.compiler.source>\n    <maven.compiler.target>11</maven.compiler.target>\n  </properties>\n\n  <build>\n    <plugins>\n      <plugin>\n        <groupId>org.apache.maven.plugins</groupId>\n        <artifactId>maven-jar-plugin</artifactId>\n        <version>3.3.0</version>\n        <configuration>\n          <archive>\n            <manifest>\n              <addClasspath>true</addClasspath>\n              <mainClass>com.adobe.analytics.LivestreamConsumer</mainClass>\n            </manifest>\n          </archive>\n        </configuration>\n      </plugin>\n    </plugins>\n  </build>\n\n</project>\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"java\"\n    }}>{`JAVA`}</h2>\n    <p><inlineCode parentName=\"p\">{`resources/java/livestream/src/main/java/com/adobe/analytics/LivestreamConsumer.java`}</inlineCode></p>\n    <pre><code parentName=\"pre\" {...{}}>{`package com.adobe.analytics;\n\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.time.Duration;\nimport java.util.concurrent.ArrayBlockingQueue;\nimport java.util.concurrent.BlockingQueue;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.zip.GZIPInputStream;\n\npublic class LivestreamConsumer implements Runnable\n{\n    private final BlockingQueue<String> dataQueue = new ArrayBlockingQueue<>(1000);\n\n    public static void main( String[] args ) throws IOException, InterruptedException {\n        LivestreamConsumer consumer = new LivestreamConsumer();\n        consumer.readFromLivestream();\n    }\n\n    public void readFromLivestream() throws IOException, InterruptedException {\n\n        String accessToken = \"PUT ACCESS TOKEN HERE\";\n        String streamId = \"PUT STREAM ID HERE\";\n\n        String streamUrl = \"https://livestream.adobe.net/api/1/stream/\" + streamId;\n\n        HttpURLConnection connection = getConnection(streamUrl, accessToken);\n        int responseCode = connection.getResponseCode();\n\n        while(responseCode != HttpURLConnection.HTTP_OK) {\n\n            if(responseCode == HttpURLConnection.HTTP_MOVED_TEMP || responseCode == HttpURLConnection.HTTP_MOVED_PERM)  {\n                // Follow the redirect\n                // Pass Authorization Header along\n                String redirectLocation = connection.getHeaderField(\"location\");\n                System.out.println(\"Redirecting to: \" + redirectLocation);\n                connection.disconnect();\n\n                connection = getConnection(redirectLocation, accessToken);\n                responseCode = connection.getResponseCode();\n\n            } else if (responseCode == HttpURLConnection.HTTP_CONFLICT) {\n                connection.disconnect();\n                throw new RuntimeException(\"Connection refused due to conflict. Check that the maxConnections query string value is identical across connections.\");\n\n            } else {\n                connection.disconnect();\n                throw new RuntimeException(\"Unexpected response code: \" + responseCode);\n            }\n        }\n\n        // Spin up a new thread to handle data processing\n        ExecutorService executorService = Executors.newSingleThreadExecutor();\n        executorService.submit(this);\n\n        // The stream is always compressed using GZIP\n        InputStream inputStream = new GZIPInputStream(connection.getInputStream());\n        BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream));\n\n        String line = reader.readLine();\n        while (line != null) {\n            // In order to ensure we keep up with incoming Livestream data, delegate work to another thread\n            // This could be replaced with writing to a data queue like Apache Kafka\n            dataQueue.put(line);\n            line = reader.readLine();\n        }\n\n        reader.close();\n        connection.disconnect();\n        executorService.shutdownNow();\n    }\n\n    private HttpURLConnection getConnection(final String streamUrl, final String accessToken) throws IOException {\n        URL url = new URL(streamUrl);\n        HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n        connection.setReadTimeout((int) Duration.ofSeconds(60).toMillis());\n        connection.setConnectTimeout((int) Duration.ofSeconds(10).toMillis());\n\n        connection.setRequestProperty(\"Accept-Encoding\", \"gzip\");\n        connection.setRequestProperty(\"Authorization\", \"Bearer \" + accessToken);\n\n        // Many client libraries remove the Authorization header on a redirect\n        // This application handles redirects manually to avoid that\n        connection.setInstanceFollowRedirects(false);\n\n        return connection;\n    }\n\n    @Override\n    public void run() {\n        try {\n            while(true) {\n                String data = dataQueue.take();\n                // Do data processing here, in a separate thread\n                System.out.println(data);\n            }\n        } catch (InterruptedException e) {\n            throw new RuntimeException(e);\n        }\n    }\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"sourceRoot":""}